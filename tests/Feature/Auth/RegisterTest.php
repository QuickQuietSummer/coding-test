<?php

namespace Tests\Feature\Auth;

use App\Models\Role;
use App\Models\User;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Testing\TestResponse;
use Tests\TestCase;

class RegisterTest extends TestCase
{
    use DatabaseMigrations;

    private TestResponse $clientResponse;
    private TestResponse $employeeResponse;

    public function test_that_entry_point_available()
    {
        $this->clientResponse->assertStatus(201);
        $this->employeeResponse->assertStatus(201);
    }

    /**
     * @depends test_that_entry_point_available
     */
    public function test_that_registration_add_token()
    {
        self::assertCount(1, User::first()->tokens);
    }

    /**
     * @depends test_that_entry_point_available
     */
    public function test_that_client_role_created()
    {
        $exists = User::whereHas('role', function ($query) {
            return $query->where('type', '=', Role::CLIENT);
        })->exists();
        self::assertTrue($exists);
    }

    /**
     * @depends test_that_entry_point_available
     */
    public function test_that_employee_role_created()
    {
        $exists = User::whereHas('role', function ($query) {
            return $query->where('type', '=', Role::EMPLOYEE);
        })->exists();
        self::assertTrue($exists);
    }

    public function test_that_response_exact_structure()
    {
        $this->clientResponse->assertJsonStructure([
            'message',
            'data' => [
                'access_token',
                'token_type',
            ]
        ]);

        $this->employeeResponse->assertJsonStructure([
            'message',
            'data' => [
                'access_token',
                'token_type',
            ]
        ]);
    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->clientResponse = $this->json('POST', 'api/register-client', [
                'name' => 'client',
                'email' => 'client@mail.ru',
                'password' => 'pass1234',
                'password_confirmation' => 'pass1234',
            ]
        );
        $this->employeeResponse = $this->json('POST', 'api/register-employee', [
                'name' => 'employee',
                'email' => 'employee@mail.ru',
                'password' => 'pass1234',
                'password_confirmation' => 'pass1234',
            ]
        );
    }

}
